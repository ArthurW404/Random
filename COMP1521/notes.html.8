<html>
<head>
<title>Week 09 Lectures</title>
<link href='notes.css' rel='stylesheet' type='text/css'>
</head>
<body>
<p><span class='title'>Week 09 Lectures</span><p>
<p><hr><p>
<table width='100%' cellpadding='0'>
<tr valign='top'><td align='left'><span class='section'>Networking</span></td><td align='right'></td></tr></table>
<p>
<p><hr><p>
<table width='100%' cellpadding='0'>
<tr valign='top'><td align='left'><span class='heading'>Sockets</span></td><td align='right'><small>2/85</small></td></tr></table>
<p>
Unix/Linux provides <em>sockets</em>
to communicate between processes
that may be on different systems
(i.e., across a network)
<ul>
<li> <small>e.g. web servers, networked databases, networked message queues, ...</small>
</ul>
<p>
<p><div class='center'>
<img alt="[Diagram:Pics/networks/sockets-small.png]" src="Pics/networks/sockets-small.png">
</div><p>
<p><hr><p>
<table width='100%' cellpadding='0'>
<tr valign='top'><td align='left'><span class='cont'>... Sockets</span></td><td align='right'><small>3/85</small></td></tr></table>
<p>
<em>Socket</em> = an end-point of a channel
<ul>
<li> commonly used to construct client-server systems
<li> either locally (Unix domain) or network-wide (Internet domain)
<li> server creates a socket, then ...
<ul>
<li> binds to an address <small>(local or network)</small>
<li> listens for connections from clients
</ul>
<li> client creates a socket, then ...
<ul>
<li> connects to the server using known address
<li> writes to server via socket &nbsp;<small>(i.e. sends <em>requests</em>)</small>
<li> reads from server via socket &nbsp;<small>(i.e. receives <em>responses</em>)</small>
</ul>
<p><hr><p>
<table width='100%' cellpadding='0'>
<tr valign='top'><td align='left'><span class='cont'>... Sockets</span></td><td align='right'><small>4/85</small></td></tr></table>
<p>
<large><font color="#008800"><b><code>int socket(int <i>Domain</i>, int <i>Type</i>, int <i>Protocol</i>)</code></b></font></large>
<ul>
<li> requires <large><font color="#008800"><b><code>#include &lt;sys/socket.h&gt;</code></b></font></large>
<li> creates a socket, using ...
<ul>
<li> <large><font color="#008800"><b><code><i>Domain</i></code></b></font></large> ... communications domain
<ul>
<li> <large><code>AF_LOCAL</code></large> ... <small>on the local host (Unix domain)</small>
<li> <large><code>AF_INET</code></large> ... <small>over the network (Internet domain)</small>
</ul>
<li> <large><font color="#008800"><b><code><i>Type</i></code></b></font></large> ... semantics of communication
<ul>
<li> <large><code>SOCK_STREAM</code></large> ... <small>sequenced, reliable communications stream</small>
<li> <large><code>SOCK_DGRAM</code></large> ... <small>connectionless, unreliable packet transfer</small>
</ul>
<li> <large><font color="#008800"><b><code><i>Protocol</i></code></b></font></large> ... communication protocol
<ul>
<li> many exist (see <large><code>/etc/protocols</code></large>), <small>e.g. IP, TCP, UDP, ...</small>
</ul>
</ul>
<li> returns a socket descriptor <small>(small <large><code>int</code></large>)</small> or -1 on error
</ul>
<p><hr><p>
<table width='100%' cellpadding='0'>
<tr valign='top'><td align='left'><span class='cont'>... Sockets</span></td><td align='right'><small>5/85</small></td></tr></table>
<p>
<large><font color="#008800"><b><code>int bind(int <i>Sockfd</i>, <br>
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp; <i>SockAddr</i> *<i>Addr</i>, socklen_t <i>AddrLen</i>)</code></b></font></large>
<ul>
<li> associates an open socket with an address
<li> for Unix Domain, address is a pathname in the file system
<li> for Internet Domain, address is IP address + port number
</ul>
<br>
<large><font color="#008800"><b><code>int listen(int <i>Sockfd</i>, int <i>Backlog</i>)</code></b></font></large>
<ul>
<li> wait for connections on socket <large><code><i>Sockfd</i></code></large>
<li> allow at most <large><code><i>Backlog</i></code></large> connections to be queued up
</ul>
<p><hr><p>
<table width='100%' cellpadding='0'>
<tr valign='top'><td align='left'><span class='cont'>... Sockets</span></td><td align='right'><small>6/85</small></td></tr></table>
<p>
<large><font color="#008800"><b><code><i>SockAddr</i></code></b></font></large> &nbsp;=&nbsp; <large><font color="#008800"><b><code>struct sockaddr_in</code></b></font></large>
<ul>
<li> <large><font color="#008800"><b><code>sin_family</code></b></font></large> ... domain: &nbsp;<large><code>AF_UNIX</code></large>&nbsp; or &nbsp;<large><code>AF_INET</code></large>
<li> <large><font color="#008800"><b><code>sin_port</code></b></font></large> ... port number: <large><code>80</code></large>, <large><code>443</code></large>, etc.
<li> <large><font color="#008800"><b><code>sin_addr</code></b></font></large> ... structure containing host address
<li> <large><font color="#008800"><b><code>sin_zero[8]</code></b></font></large> ... padding
</ul>
Example:
<p><pre><small>
struct sockaddr_in web_server;
server = gethostbyname("www.cse.unsw.edu.au");
web_server.sin_family = AF_INET;
web_server.sin_addr.s_addr = server;
web_server.sin_port = htons(80);
</sprogam>
<p><hr><p>
<table width='100%' cellpadding='0'>
<tr valign='top'><td align='left'><span class='cont'>... Sockets</span></td><td align='right'><small>7/85</small></td></tr></table>
<p>
<small><large><font color="#008800"><b><code>int accept(int <i>Sockfd</i>, <i>SockAddr</i> *<i>Addr</i>, socklen_t *<i>AddrLen</i>)</code></b></font></large></small>
<ul>
<li> <large><code><i>Sockfd</i></code></large> has been created, bound and is listening
<li> blocks until a connection request is received
<li> sets up a connection between client/server after <large><code>connect()</code></large>
<li> places information about the requestor in <large><code><i>Addr</i></code></large>
<li> returns a new socket descriptor, or -1 on error
</ul>
<br>
<small><large><font color="#008800"><b><code>int connect(int <i>Sockfd</i>, <i>SockAddr</i> *<i>Addr</i>, socklen_t <i>AddrLen</i>)</code></b></font></large></small>
<ul>
<li> connects the socket <large><code><i>Sockfd</i></code></large> to address <large><code><i>Addr</i></code></large>
<li> assumes that <large><code><i>Addr</i></code></large> contains a process listening appropriately
<li> returns 0 on success, or -1 on error
</ul>
<p><hr><p>
<table width='100%' cellpadding='0'>
<tr valign='top'><td align='left'><span class='cont'>... Sockets</span></td><td align='right'><small>8/85</small></td></tr></table>
<p>
Pseudo-code showing structure of a simple client program:
<p><pre>
main() {
  s = socket(Domain, Type, Protocol)
  serverAddr = {Family,HostName,Port}
  connect(s, &serverAddr, Size)
  write(s, Message, MsgLength)
  read(s, Response, MaxLength)
  close(s)
}
</pre><p>
<br>
<small>(See <a target="_new" href="http://www.linuxhowtos.org/C_C++/socket.htm">http://www.linuxhowtos.org/C_C++/socket.htm</a>)</small>
<p><hr><p>
<table width='100%' cellpadding='0'>
<tr valign='top'><td align='left'><span class='cont'>... Sockets</span></td><td align='right'><small>9/85</small></td></tr></table>
<p>
Pseudo-code showing structure of a server program:
<p><pre><small>
main() {
   s = socket(Domain, Type, Protocol)
   serverAddr = {Family,HostName,Port}
   bind(s, serverAddr, Size)
   listen(s, QueueLen)
   while (1) {
      int ss = accept(s, &clientAddr, &Size)
      if (fork() != 0)
         close(ss)  <comment>// server not involved</comment>
      else {
         <comment>// fork of server handles request</comment>
         close(s)
         handleConnection(ss)
         exit(0)
      }
   }
}
</small></pre><p>
<p><hr><p>
<table width='100%' cellpadding='0'>
<tr valign='top'><td align='left'><span class='heading'>Client-Server Architecture</span></td><td align='right'><small>10/85</small></td></tr></table>
<p>
Popular software architecture:
<p><div class='center'>
<img alt="[Diagram:Pics/networks/client-server-small.png]" src="Pics/networks/client-server-small.png">
</div><p>
<p><hr><p>
<table width='100%' cellpadding='0'>
<tr valign='top'><td align='left'><span class='heading'>Life of an IP Packet</span></td><td align='right'><small>11/85</small></td></tr></table>
<p>
<div class='center'>
Video available at
<a href="https://www.youtube.com/watch?v=9BGWrLiT9qs">https://www.youtube.com/watch?v=9BGWrLiT9qs</a>
</div>
<p><hr><p>
<table width='100%' cellpadding='0'>
<tr valign='top'><td align='left'><span class='heading'>Networks</span></td><td align='right'><small>12/85</small></td></tr></table>
<p>
<em>Network</em> = interconnected collection of computers
<p>
Flavours of networks:
<ul>
<li> <em>local area networks</em> ... within an organisation/physical location
<li> <em>wide area networks</em> ... geographically dispersed (WAN)
<li> <em>Internet</em> ... global set of interconnected WANs
</ul>
Why do we need networks?
<ul>
<li> previously ... transfer data, send text-based emails
<li> nowadays ... communication, communication, communication
<li> sharing resources e.g. printers, large storage devices, ...
</ul>
<p><hr><p>
<table width='100%' cellpadding='0'>
<tr valign='top'><td align='left'><span class='cont'>... Networks</span></td><td align='right'><small>13/85</small></td></tr></table>
<p>
What are the basic requirements for a network?
<ul>
<li> get data from machine A to machine B
<li> A and B may be separated by 100's of networks and devices
</ul>
How to achieve this?  &nbsp;&nbsp; <font color='#999999'><small>(using postal service analogy)</small></font>
<ul>
<li> need a unique address for destination
<li> identify a route &nbsp;&nbsp; <font color='#999999'><small>(first post office)</small></font>
<li> process at intermediate nodes &nbsp; <font color='#999999'><small>(other post offices)</small></font>
<li> follow certain protocols &nbsp;&nbsp; <font color='#999999'><small>(envelopes, stamps fees)</small></font>
</ul>
<p><hr><p>
<table width='100%' cellpadding='0'>
<tr valign='top'><td align='left'><span class='heading'>Overview of Network Communication</span></td><td align='right'><small>14/85</small></td></tr></table>
<p>
How a file is sent over the network:
<ul>
</ul>
<li> File data divided into <em>packets</em> by source device
<small>
<ul>
<li> packets are small fixed-size chunks of data, with headers
</ul>
</small>
<li> Passed across <em>physical link</em> &nbsp;<small>(wire, radio, optic fibre)</small>
<li> Passing through multiple <em>nodes</em> &nbsp;<small>(routers, switches)</small>
<small>
<ul>
<li> each node decides where to send it next &nbsp;<small>(for best route)</small>
</ul>
</small>
<li> Packets reach destination device
<li> Re-ordering, error-checking, buffering
<li> File received by receiving process/user
</ul>
<p><hr><p>
<table width='100%' cellpadding='0'>
<tr valign='top'><td align='left'><span class='heading'>The Internet</span></td><td align='right'><small>15/85</small></td></tr></table>
<p>
<table cellpadding="6">
<tr><td>
Components of the Internet ...
<ul>
<li> millions of <em>connected devices</em>
<small>
<ul>
<li> e.g PC, server, laptop, smartphone
<li> <em>host</em> = end system, running network apps
</ul>
</small>
<li> <em>communication links</em>
<small>
<ul>
<li> e.g. fibre, copper, radio, satellite
<li> bandwidth = transmission rate
</ul>
</small>
<li> <em>packet switches</em>
<small>
<ul>
<li> e.g. routers, network switches
<li> compute next hop, forward packets
</ul>
</small>
</ul>
</td>
<td> &nbsp;&nbsp;&nbsp; </td>
<td>
<img src="Pics/misc/internet.png">
</td></tr>
</table>
<p><hr><p>
<table width='100%' cellpadding='0'>
<tr valign='top'><td align='left'><span class='cont'>... The Internet</span></td><td align='right'><small>16/85</small></td></tr></table>
<p>
Internet communications are based on a 5-layer "stack":
<ul>
<li> <em>Physical layer:</em> bits on (wires or fibre optics or radio)
<li> <em>Link layer:</em> ethernet, MAC addressing, CSMA etc.
<li> <em>Network layer:</em> routing protocols, IP
<li> <em>Transport layer:</em> process-process data transfer, TCP/UDP
<li> <em>Application layer:</em> DNS, HTTP, email, Skype, torrents, FTP etc.
</ul>
Typical packet encapsulates data from all lower layers
<p>
Why so many layers (of abstraction)?
<ul>
<li> each layer encapsulates one aspect of network transport
<li> provides layered <em>reference model</em> for discussion
<li> modularization eases maintenance/updating
<small>
<ul>
<li> e.g. changing implementation of one layer doesn't affect other layers
</ul>
</small>
</ul>
<p><hr><p>
<table width='100%' cellpadding='0'>
<tr valign='top'><td align='left'><span class='cont'>... The Internet</span></td><td align='right'><small>17/85</small></td></tr></table>
<p>
Path of data through network layers
<p><div class='center'>
<img alt="[Diagram:Pics/networks/transport-small.png]" src="Pics/networks/transport-small.png">
</div><p>
<p><hr><p>
<table width='100%' cellpadding='0'>
<tr valign='top'><td align='left'><span class='heading'>Protocols</span></td><td align='right'><small>18/85</small></td></tr></table>
<p>
<em>Network protocols</em> govern all communication activity on the network
<p>
Protocols provide <em>communication rules</em> ...
<ul>
<li> format and order of messages sent/received
<li> actions taken on message transmission/receipt 
</ul>
Protocols are defined in all of the layers, e.g.
<ul>
<li> link layer: PPP (point-to-point protocol), ...
<li> network layer: IP (internet protoocol), ...
<li> transport layer: TCP <small>(transmission control)</small>, UDP <small>(user datagram)</small>
<li> application layer: HTTP, FTP, SSH, POP, SMTP, ...
</ul>
Higher-level layers typically have a wider variety of protocols
<p><hr><p>
<table width='100%' cellpadding='0'>
<tr valign='top'><td align='left'><span class='heading'>Network Application Layer</span></td><td align='right'><small>19/85</small></td></tr></table>
<p>
The application layer directly supports the apps we interact with, e.g.
<ul>
<li> e-mail
<li> web
<li> text messaging
<li> remote login
<li> P2P file sharing
<li> multi-user network games
<li> streaming stored video (YouTube, Hulu, Netflix) 
<li> voice over IP (e.g., Skype)
<li> real-time video conferencing
<li> social networking
</ul>
<p><hr><p>
<table width='100%' cellpadding='0'>
<tr valign='top'><td align='left'><span class='heading'>Client-Server Architecture</span></td><td align='right'><small>20/85</small></td></tr></table>
<p>
<em>Client-server</em> = common way of structuring network communication
<p>
<em>Server</em> is a data provider
<ul>
<li> process that waits for requests
<li> always-on host, with permanent IP address
<li> possibly using data centers / multiple CPUs for scaling
</ul>
<em>Client</em> is a data consumer
<ul>
<li> sends requests to server; collects response
<li> may be intermittently connected, may have dynamic IP address
<li> does not communicate directly with other clients
</ul>
<small>
<br>
Peer-to-peer (P2P) systems run both client and server processes on each host
</small>
<p><hr><p>
<table width='100%' cellpadding='0'>
<tr valign='top'><td align='left'><span class='cont'>... Client-Server Architecture</span></td><td align='right'><small>21/85</small></td></tr></table>
<p>
Client-server systems are frequently implemented with sockets ...
<p><div class='center'>
<img alt="[Diagram:Pics/networks/client-server-layers-small.png]" src="Pics/networks/client-server-layers-small.png">
</div><p>
<p><hr><p>
<table width='100%' cellpadding='0'>
<tr valign='top'><td align='left'><span class='heading'>Addressing</span></td><td align='right'><small>22/85</small></td></tr></table>
<p>
Server processes must have a unique Internet-wide <em>address</em>
<ul>
<li> part of address is <em>IP address</em> of host machine
<li> other part of address is <em>port number</em> where server listens
</ul>
Example: <large><code><font color='#009900'>128.119.245.12</font>:<font color='#0000CC'>80</font></code></large>
<ul>
<li> address of web server on gaia.cs.umass.edu
</ul>
Some standard port numbers
<ul>
<li> 22 ... ssh &nbsp; (Secure Shell)
<li> 25 ... smtp &nbsp; (Simple Mail Transfer Protocol)
<li> 53 ... dns &nbsp; (Domain Name System)
<li> 80 ... http &nbsp; (Web server)
<li> 389 ... ldap &nbsp; (Lightweight Directory Access Protocol)
<li> 443 ... https &nbsp; (Web server (encrypted))
<li> 5432 ... PostgreSQL database server
</ul>
<p><hr><p>
<table width='100%' cellpadding='0'>
<tr valign='top'><td align='left'><span class='heading'>IP Addresses</span></td><td align='right'><small>23/85</small></td></tr></table>
<p>
<em>IP Address</em> = unique identifier for host on network
<ul>
<li> given as a 32-bit identifier (dotted quad), e.g. 129.94.242.20
<li> special case: &nbsp; 127.0.0.1 &nbsp; <small>(loopback address referring to local host)</small>
<li> IP addresses are assigned by
<ul>
<li> sys admin entering into local registry (for "permanent" addresses)
<li> dynamically, by getting a temporary address from DHCP server
</ul>
</ul>
<br>
Note: the world is runnning out of 32-bit IP addresses
<ul>
<li> why? Internet of Things ... <i>every</i> networked device needs an IP
<li> IPv6 uses 128-bit addresses e.g. 2001:388:c:4193:129:94:242:20
<li> distinct addresses: &nbsp; IPv4 &nbsp;4&times;10<sup>9</sup>, &nbsp; IPv6 &nbsp;3&times;10<sup>38</sup>
</ul>
<p><hr><p>
<table width='100%' cellpadding='0'>
<tr valign='top'><td align='left'><span class='heading'>Application-layer Protocols</span></td><td align='right'><small>24/85</small></td></tr></table>
<p>
Each application-layer protocol defines
<ul>
<li> <em>types</em> of messages
<ul>
<li> different types of requests and responses
</ul>
<li> message <em>syntax</em>
<ul>
<li> what fields are in messages; how fields are delineated
</ul>
<li> message <em>semantics</em>
<ul>
<li> meaning of information in fields
</ul>
<li> processing <em>rules</em>
<ul>
<li> when and how processes respond to messages
</ul>
</ul>
<br>
Protocols can be <em>open</em> (e.g. HTTP) or <em>proprietary</em> (e.g. Skype)
<p><hr><p>
<table width='100%' cellpadding='0'>
<tr valign='top'><td align='left'><span class='heading'>The HTTP Protocol</span></td><td align='right'><small>25/85</small></td></tr></table>
<p>
<em>HTTP</em> = HyperText Transfer Protocol
<ul>
<li> an extremely important protocol (drives the Web)
<li> message types: URLs (requests) and Web pages (responses)
<li> message syntax: headers + data <small>(see details later)</small>
</ul>
URLs are the primary type of request
<p><div class='center'>
<img alt="[Diagram:Pics/networks/url-small.png]" src="Pics/networks/url-small.png">
</div><p>
Web pages are the primary type of response
<ul>
<li> contain HTML; may contain references to other types of objects
<li> all web objects are addressable via a URL
</ul>
<p><hr><p>
<table width='100%' cellpadding='0'>
<tr valign='top'><td align='left'><span class='cont'>... The HTTP Protocol</span></td><td align='right'><small>26/85</small></td></tr></table>
<p>
<table>
<tr>
<td>
Application-layer protocol for the Web
<p>
Client-server model:
<ul>
<li> client = <em>Web browser</em> <small>(e.g. Chrome)</smalL>
<ul>
<li> sends HTTP requests
<li> receives HTTP responses
<li> shows response as web page
</ul>
<li> server = <em>Web server</em> <small>(e.g. Apache)</small>
<ul>
<li> receives HTTP requests
<li> sends HTTP responses
</ul>
</ul>
</td>
<td>&nbsp;&nbsp;&nbsp;</td>
<td>
<img src="Pics/networks/http-overview.png">
</td>
</table>
<p><hr><p>
<table width='100%' cellpadding='0'>
<tr valign='top'><td align='left'><span class='cont'>... The HTTP Protocol</span></td><td align='right'><small>27/85</small></td></tr></table>
<p>
Transport layer view of HTTP application layer
<ul>
<li> using TCP
<li> client initiates TCP connection (socket) to server, port 80
<li> server accepts TCP connection from client
<li> client sends HTTP request messages (e.g. GET)
<li> server responds with HTTP messages (e.g. HTML)
<li> interaction completes, connection (socket) closed
</ul>
<p><div class='center'>
<img alt="[Diagram:Pics/networks/http-conn-small.png]" src="Pics/networks/http-conn-small.png">
</div><p>
<p><hr><p>
<table width='100%' cellpadding='0'>
<tr valign='top'><td align='left'><span class='cont'>... The HTTP Protocol</span></td><td align='right'><small>28/85</small></td></tr></table>
<p>
HTTP request message <small>(ascii text)</small>
<br>
<p><div class='center'>
<img alt="[Diagram:Pics/networks/http-request-small.png]" src="Pics/networks/http-request-small.png">
</div><p>
URL can also include a <em>query string</em>, e.g.
<p><div class='center'>
<img alt="[Diagram:Pics/networks/http-query-small.png]" src="Pics/networks/http-query-small.png">
</div><p>
<p><hr><p>
<table width='100%' cellpadding='0'>
<tr valign='top'><td align='left'><span class='cont'>... The HTTP Protocol</span></td><td align='right'><small>29/85</small></td></tr></table>
<p>
First line of HTTP request contains (method, path, protocol), e.g.
<p><div class='center'>
<img alt="[Diagram:Pics/networks/http-req-head-small.png]" src="Pics/networks/http-req-head-small.png">
</div><p>
<ul>
<li> no need to mention host, since connection already established
<li> <large><font color="#008800"><b><code>GET</code></b></font></large> requests data from resource specified by path 
<ul>
<li> query string is included in the path
</ul>
<li> <large><font color="#008800"><b><code>POST</code></b></font></large> submitd data to be processed by specified resource
<ul>
<li> query string is included in the body
</ul>
<li> <large><font color="#008800"><b><code>HEAD</code></b></font></large> same as <large><code>GET</code></large>, but returns only header (no data)
</ul>
<p><hr><p>
<table width='100%' cellpadding='0'>
<tr valign='top'><td align='left'><span class='cont'>... The HTTP Protocol</span></td><td align='right'><small>30/85</small></td></tr></table>
<p>
HTTP response message <small>(ascii text)</small>
<br><br>
<p><div class='center'>
<img alt="[Diagram:Pics/networks/http-response-small.png]" src="Pics/networks/http-response-small.png">
</div><p>
<p><hr><p>
<table width='100%' cellpadding='0'>
<tr valign='top'><td align='left'><span class='cont'>... The HTTP Protocol</span></td><td align='right'><small>31/85</small></td></tr></table>
<p>
Response status codes appear in first line of HTTP response
<ul>
<li> <large><font color="#008800"><b><code>202 OK</code></b></font></large> ... succesful request
<li> <large><font color="#008800"><b><code>301 Moved Permanently</code></b></font></large> ... requested object moved
<small>
<ul>
<li> returns new URL for client to use in future requests
</ul>
</small>
<li> <large><font color="#008800"><b><code>400 Bad Request</code></b></font></large> ... request cannot be processed
<small>
<ul>
<li> possible reasons: bad request syntax, request size too large, ...
</ul>
</small>
<li> <large><font color="#008800"><b><code>403 Forbidden</code></b></font></large> ... valid request cannot be processed
<small>
<ul>
<li> possible reasons: user does not have permission for operation
</ul>
</small>
<li> <large><font color="#008800"><b><code>404 Not Found</code></b></font></large> ... path does not exist on server
<li> <large><font color="#008800"><b><code>500 Internal Server Error</code></b></font></large> ... server cannot complete request
<small>
<ul>
<li> possible reasons: server side script fails, database not accessible, ...
</ul>
</small>
</ul>
<p><hr><p>
<table width='100%' cellpadding='0'>
<tr valign='top'><td align='left'><span class='heading'>Server Addresses (DNS)</span></td><td align='right'><small>32/85</small></td></tr></table>
<p>
Network requests typically use server <em>names</em>, e.g.
<ul>
<li> <large><code>http://</code></large><large><font color="#008800"><b><code>www.cse.unsw.edu.au</code></b></font></large><large><code>/~cs1521/17s2/</code></large>
</ul>
Setting up a TCP connection needs an IP address, not a name
<p>
<em>Domain Name System</em> provides name&rarr;IP address mapping
<p>
Can access this on Unix/Linux via the <large><code>host</code></large> command, e.g.
<p><pre>
$ <b>host www.cse.unsw.edu.au</b>
www.cse.unsw.edu.au has address 129.94.242.51
$ <b>host a.b.c.com</b>
Host a.b.c.com not found: 3(NXDOMAIN)
</pre><p>
(assumes that you have a network connection)
<p><hr><p>
<table width='100%' cellpadding='0'>
<tr valign='top'><td align='left'><span class='cont'>... Server Addresses (DNS)</span></td><td align='right'><small>33/85</small></td></tr></table>
<p>
In real life, often have one object referenced by many names, e.g.
<ul>
<li> a person: &nbsp; <i>name</i>, &nbsp;SSN, &nbsp;TFN, &nbsp;passport #, ...
</ul>
On the Internet, each <em>host</em> has ...
<ul>
<li> one or more symbolic names, &nbsp; unique IP address
<li> symbolic: <large><code>www.cse.unsw.edu.au</code></large>, &nbsp; IP: <large><code>129.94.242.51</code></large>
</ul>
Note:
<ul>
<li> a given IP address may be reachable via several names
<li> a given name may map to several IPs &nbsp;<small>(e.g. for load distribution)</small>
</ul>
<p><hr><p>
<table width='100%' cellpadding='0'>
<tr valign='top'><td align='left'><span class='cont'>... Server Addresses (DNS)</span></td><td align='right'><small>34/85</small></td></tr></table>
<p>
<em>Domain Name System</em> (DNS)
<ul>
<li> effectively a distributed database of name&rarr;IP mappings
<li> implemented across a hierarchy of <em>name servers</em>
<li> name servers cooperate to <em>resolve</em> names to IP addresses
</ul>
This is an extremely important core function on the Internet
<p>
<br>
Why not centralize DNS?
<ul>
<li> central point of failure, high traffic volume
<li> distant database (lag), maintenance of very large DB
</ul>
<p><hr><p>
<table width='100%' cellpadding='0'>
<tr valign='top'><td align='left'><span class='cont'>... Server Addresses (DNS)</span></td><td align='right'><small>35/85</small></td></tr></table>
<p>
<p><div class='center'>
<img alt="[Diagram:Pics/networks/dns-tree-small.png]" src="Pics/networks/dns-tree-small.png">
</div><p>
Resolving <large><code>www.amazon.com</code></large> in this system
<ul>
<li> contact a root DNS server to find <large><code>.com</code></large> DNS server
<li> contact <large><code>.com</code></large> DNS server to get <large><code>amazon.com</code></large> DNS server
<li> contact <large><code>amazon.com</code></large> DNS server to get IP of their web server
</ul>
<p><hr><p>
<table width='100%' cellpadding='0'>
<tr valign='top'><td align='left'><span class='cont'>... Server Addresses (DNS)</span></td><td align='right'><small>36/85</small></td></tr></table>
<p>
Two styles of name resolution
<ul>
<li> <em>iterated query</em> ... work done by client
<ul>
<li> client contacts name server X
<li> gets response "I don't know, but ask name server Y"
<li> OR gets response "Here is the IP address"
<li> client repeats above steps until name resolved
</ul>
<li> <em>recursive query</em> ... work done by name servers
<ul>
<li> client contacts name server X
<li> X contacts name server Y, Y contacts Z, ...
<li> query propagates until name resolved
</ul>
</ul>
<p><hr><p>
<table width='100%' cellpadding='0'>
<tr valign='top'><td align='left'><span class='cont'>... Server Addresses (DNS)</span></td><td align='right'><small>37/85</small></td></tr></table>
<p>
How are the various DNS servers structured/managed?
<ul>
<li> <em>top-level domain</em> (TLD) name servers
<ul>
<li> <b>.com</b>, <b>.org</b>, <b>.edu</b> and all country-level domains (e.g. <b>.uk</b>)
<li> Network Solutions maintains servers for <b>.com</b>
<li> AusRegistry maintains servers for <b>.au</b>
</ul>
<li> <em>authoritative</em> name servers
<ul>
<li> maintains mappings from names to IP within an organisation
<li> all hosts within the organisation are registered here
</ul>
<li> <em>local</em> (default) name servers
<ul>
<li> maintains cache of name&rarr;IP mappings
<li> starting point for DNS queries, forward to TLD server <small>(if !cached)</small>
</ul>
</ul>
<p><hr><p>
<table width='100%' cellpadding='0'>
<tr valign='top'><td align='left'><span class='heading'>Network Architecture</span></td><td align='right'><small>38/85</small></td></tr></table>
<p>
Five layer model:
<ul>
<li> lowest (least abstract) level
<li> <em>physical layer</em> ... bits on wires
<li> <em>link layer</em> ... e.g. ethernet, MAC
<li> <em>network layer</em> ... e.g. IP
<li> <em>transport layer</em> ... e.g. TCP/UDP
<li> <em>application layer</em> ... e.g. HTTP, email
<li> highest (most abstract) level
</ul>
<br>
Packets at each level incorporate headers from lower levels
<p>
Software at each level uses headers appropriate for its purpose
<p><hr><p>
<table width='100%' cellpadding='0'>
<tr valign='top'><td align='left'><span class='heading'>Transport Layer</span></td><td align='right'><small>39/85</small></td></tr></table>
<p>
Transport layer deals with ...
<ul>
<li> <em>data integrity</em>
<small>
<ul>
<li> some apps (e.g. file transfer) require 100% reliable transfer
<li> other apps (e.g. audio streaming) can tolerate some loss
</ul>
</small>
<li> <em>timing</em>
<small>
<ul>
<li> some apps (e.g. networked games) require low transmission delay
</ul>
</small>
<li> <em>throughput</em>
<small>
<ul>
<li> some apps (e.g. multimedia) require minimum throughput
<li> other apps ("elastic apps") can use whatever is available
</ul>
</small>
<li> <em>security</em>
<small>
<ul>
<li> some apps (e.g. web services) require encrypted transmission
</ul>
</small>
</ul>
<p><hr><p>
<table width='100%' cellpadding='0'>
<tr valign='top'><td align='left'><span class='cont'>... Transport Layer</span></td><td align='right'><small>40/85</small></td></tr></table>
<p>
Properties of some common apps ...
<ul>
<li> file transfer: &nbsp;no loss, &nbsp;elastic, &nbsp;not time sensitive
<li> email: &nbsp;no loss, &nbsp;elastic, &nbsp;not time sensitive
<li> web/http: &nbsp;no loss, &nbsp;elastic, &nbsp;not time sensitive
<li> audio: &nbsp;loss-tolerant, &nbsp;5Kbps-1Mbps, &nbsp;few ms delay ok
<li> video: &nbsp;loss-tolerant, &nbsp;10Kbps-5Mbps, &nbsp;few ms delay ok
<li> games: &nbsp;loss-tolerant, &nbsp;5Kbps-5Mbps, &nbsp;few secs delay ok
<li> texting: &nbsp;no loss, &nbsp;elastic, &nbsp;few ms delay ok
</ul>
<p><hr><p>
<table width='100%' cellpadding='0'>
<tr valign='top'><td align='left'><span class='heading'>Transport Layer Protocols</span></td><td align='right'><small>41/85</small></td></tr></table>
<p>
Transport layer protocols provide
<ul>
<li> <em>logical communication</em> between processes on different hosts
<li> transport protocols run within end-point processes
<ul>
<li> sender: splits messages into <em>segments</em>, passes to network layer
<li> receiver: reassembles segments into messages, passes to app layer
</ul>
</ul>
<br>
Two main transport layer protocols on Internet
<ul>
<li> TCP ... reliable, connection-oriented protocol, byte-stream
<li> UDP ... unreliable, simple, connectionless protocol, segments
</ul>
<p><hr><p>
<table width='100%' cellpadding='0'>
<tr valign='top'><td align='left'><span class='cont'>... Transport Layer Protocols</span></td><td align='right'><small>42/85</small></td></tr></table>
<p>
<em>TCP</em> (Transmission Control Protocol) provides ...
<ul>
<li> <em>reliable transport</em>: data flow between sender/receiver
<li> <em>flow control</em>: sender doesn't overwhelm receiver
<li> <em>congestion control</em>: slow sender if network congested
<li> <em>connection-oriented</em>: setup required between client/server
</ul>
Does not provide: <small>timing/throughput guarantees, security</small>
<p><br>
<em>UDP</em> (User Datagram Protocol) provides ...
<ul>
<li> fast (for sender), but unreliable data transfer
</ul>
Does not provide: <small>reliability, flow control, timing/throughput guarantees, security</small>
<p><hr><p>
<table width='100%' cellpadding='0'>
<tr valign='top'><td align='left'><span class='cont'>... Transport Layer Protocols</span></td><td align='right'><small>43/85</small></td></tr></table>
<p>
TCP is typically layered on top of IP protocol
<ul>
<li> IP is an unreliable network-layer protocol
<li> TCP provides reliable stream of data on top of IP
</ul>
How TCP works ...
<ul>
<li> set up connection between sender and receiver
<li> sender transmits a pipeline of segments
<li> expect ACK for each segment
<li> retransmissions triggered by timeouts and duplicate ACKs
<li> receiver manages receipt and collation of segments
</ul>
<p><hr><p>
<table width='100%' cellpadding='0'>
<tr valign='top'><td align='left'><span class='cont'>... Transport Layer Protocols</span></td><td align='right'><small>44/85</small></td></tr></table>
<p>
Above comments makes UDP sound "sub-standard"
<p>
However, it has a number of advantages (over TCP) ...
<ul>
<li> small segment headers, no connection setup costs
<li> UDP senders can transmit segments as fast as they like
<li> segments are handled independently of each other
</ul>
Effective for low-latency apps that can tolerate lost/damaged packets
<p>
Error detection requires use of <em>checksum</em>
<ul>
<li> sender and receiver treat segment data as sequence of ints
<li> sender: compute sum of ints, store in header
<li> receiver: compute sum of ints, compare to checksum
</ul>
Important applications that use UDP: &nbsp;DNS, &nbsp;TFTP, &nbsp;RTSP
<p><hr><p>
<table width='100%' cellpadding='0'>
<tr valign='top'><td align='left'><span class='heading'>Network Layer</span></td><td align='right'><small>45/85</small></td></tr></table>
<p>
Transport layer provides a way for app processes to communicate
<p>
Network layer provides communication between <em>hosts</em>
<ul>
<li> hosts specified by IP addresses (e.g. 129.94.242.19)
</ul>
Basic functions of network layer (Internet layer)
<ul>
<li> for outgoing packets:
<ul>
<li> select the next-hop host
<li> pass packet to link layer to transmit to host
</ul>
<li> for incoming packets:
<ul>
<li> if reached destination: extract payload, pass to transport layer
<li> if not reached destination, treat as outgoing packet
</ul>
<li> for all packets/transmissions: error detection, diagnostics
<li> may also split "oversize" segments into smaller packets
</ul>
<p><hr><p>
<table width='100%' cellpadding='0'>
<tr valign='top'><td align='left'><span class='heading'>Network Layer Protocol</span></td><td align='right'><small>46/85</small></td></tr></table>
<p>
IP (Internet Protocol) is a network layer protocol that provides ...
<ul>
<li> host addressing and routing of packets
<li> splitting and reassembly of large packets
</ul>
Routing is one of the most important functions
<ul>
<li> each host maintains a <em>routing table</em> &nbsp;<small>(maps &nbsp;address&rarr;next-hop)</small>
<li> uses <em>subnets</em> to reduce table size
<ul>
<li> all hosts in a subnet have common prefix
	&nbsp;<small>(e.g. CSE 129.94.2xx.xxx)</small>
<li> all IP addresses with common prefix sent to same host (gateway)
</ul>
<li> routing table maintained dynamically
<ul>
<li> hosts transmit "active" signals to each other periodically
</ul>
</ul>
<p><hr><p>
<table width='100%' cellpadding='0'>
<tr valign='top'><td align='left'><span class='cont'>... Network Layer Protocol</span></td><td align='right'><small>47/85</small></td></tr></table>
<p>
Simplified routing algorithm (IP forwarding)
<p><pre><small>
Inputs: D = destination IP address
        N = network prefix (of IP address)

if (N matches a directly connected network address)
   send packet over link to D
else if (routing table contains a route for N)
   send packet to next-hop address given in routing table
else if (default route exists in routing table)
   send packet to the default route
else
   can't find route; transmit error message to sender
</small></pre><p>
<p><hr><p>
<table width='100%' cellpadding='0'>
<tr valign='top'><td align='left'><span class='heading'>Link Layer</span></td><td align='right'><small>48/85</small></td></tr></table>
<p>
Link layer takes packets from network layer and transmits them
<ul>
<li> every host on network has network layer implementation
<li> implemented as a combination of hardware/software
<li> each host contains a <em>network interface card</em> (NIC)
<li> connected to system bus as i/o device
</ul>
Services provided by link layer
<ul>
<li> <em>flow control</em> ... <small>pacing between adjacent sending and receiving nodes</small>
<li> <em>error detection</em> ... <small>detects transmission errors; flags error to network layer</small>
<li> <em>error correction</em> ... <small>can identify and correct single bit errors</small>
</ul>
If error corrected, no retransmission; if not correctable, request retransmission
<p><hr><p>
<table width='100%' cellpadding='0'>
<tr valign='top'><td align='left'><span class='heading'>Ethernet</span></td><td align='right'><small>49/85</small></td></tr></table>
<p>
<em>Ethernet</em> is an example of link layer implementation
<ul>
<li> ethernet is a cable physically connecting multiple hosts
<li> data broadcast onto cable, tagged with receiver MAC address
<li> devices recognise their own data using MAC address
</ul>
<p><div class='center'>
<img alt="[Diagram:Pics/networks/ethernet-small.png]" src="Pics/networks/ethernet-small.png">
</div><p>
<small>MAC address = Media Access Control address, &nbsp;stored in NIC</small>
<p><hr><p>
<table width='100%' cellpadding='0'>
<tr valign='top'><td align='left'><span class='cont'>... Ethernet</span></td><td align='right'><small>50/85</small></td></tr></table>
<p>
Ethernet is a shared broadcast medium, and so ...
<ul>
<li> <em>interference</em>: two different packets broadcast at same time
<li> <em>collision</em>: node receives two or more signals at same time
</ul>
<em>Multiple access protocols</em> handle this, <small>but cannot also use ethernet</small>
<p>
Example multiple access protocols
<ul>
<li> <em>channel partitioning</em>
<small>
<ul>
<li> partition channel based on time-slices/frequency-bands/...
<li> allocate one partition to each node for exclusive use
</ul>
</small>
<li> <em>random access</em>
<small>
<ul>
<li> allow collisions; need mechanisms to recover from collisions
</ul>
</small>
<li> <em>taking turns</em>
<small>
<ul>
<li> nodes take turns; nodes with more to send get longer turns
</ul>
</small>
</ul>
<p><hr><p>
<table width='100%' cellpadding='0'>
<tr valign='top'><td align='left'><span class='cont'>... Ethernet</span></td><td align='right'><small>51/85</small></td></tr></table>
<p>
A random access transmission protocol (CSMA)
<ol>
<li> NIC receives packet from network layer and creates frame
<li> if NIC senses channel idle, start frame transmission
<li> if channel busy, wait until channel idle and go to step 2
<li> if entire frame transmitted without interference, go to step 8
<li> if NIC detects interference while transmitting, abort transmission
<li> after abort, choose "random" delay time <small>(longer if more collisions)</small>
<li> after waiting, go to step 2
<li> mission accomplished (frame transmitted)
</ol>
<p><hr><p>
<table width='100%' cellpadding='0'>
<tr valign='top'><td align='left'><span class='section'>Concurrency</span></td><td align='right'></td></tr></table>
<p>
<p><hr><p>
<table width='100%' cellpadding='0'>
<tr valign='top'><td align='left'><span class='heading'>Concurrency/Parallelism</span></td><td align='right'><small>53/85</small></td></tr></table>
<p>
<em>Parallelism</em> = multiple computations executed simultaneously
<ul>
<li> e.g. multiple CPUs, one process on each CPU &nbsp; <small>(MIMD)</small>
<li> e.g. data vector, one processor computes on each element &nbsp; <small>(SIMD)</small>
<li> e.g. map-reduce: computation spread across multiple hosts
</ul>
<br>
<em>Concurrency</em> = multiple processes running (pseudo) simultaneously
<ul>
<li> e.g. single CPU, alternating between processes &nbsp; <small>(time-slicing)</small>
</ul>
<br>
Primarily concerned with concurrency and <em>concurrency control</em>.
<p>
Both parallelism and concurrency need to deal with <em>synchronisation</em>.
<p><hr><p>
<table width='100%' cellpadding='0'>
<tr valign='top'><td align='left'><span class='cont'>... Concurrency/Parallelism</span></td><td align='right'><small>54/85</small></td></tr></table>
<p>
Example of SIMD parallel processing (e.g. GPU)
<ul>
<li> mutliple identical processors
<li> each given one element of a data structure from main memory
<li> each performing same computation on that element
<li> results copied back to main memory data structure
</ul>
<p><div class='center'>
<img alt="[Diagram:Pics/processes/mp-small.png]" src="Pics/processes/mp-small.png">
</div><p>
<br>
But not totally independent: need to <i>synchronise</i> on completion
<p><hr><p>
<table width='100%' cellpadding='0'>
<tr valign='top'><td align='left'><span class='cont'>... Concurrency/Parallelism</span></td><td align='right'><small>55/85</small></td></tr></table>
<p>
<em>Map-reduce</em> is a popular programming model for
<ul>
<li> manipulating very large data sets
<li> on a large network of nodes &nbsp;<small>(local or distributed)</small>
</ul>
The <em>map</em> step filters data and distributes it to nodes
<ul>
<li> data distributed as <i>(key,value)</i> pairs
<li> each node receives a set of pairs with common <i>key</i>(s)
</ul>
Nodes then perform calculation on received data items
<p>
The <em>reduce</em> step computes the final result
<ul>
<li> by combining outputs (calculation results) from the nodes 
</ul>
<small>Also needs a way to determine when all calculations completed</small>
<p><hr><p>
<table width='100%' cellpadding='0'>
<tr valign='top'><td align='left'><span class='heading'>Creating Concurrency</span></td><td align='right'><small>56/85</small></td></tr></table>
<p>
One method for creating concurrent tasks:
<p>
<large><code>fork()</code></large> creates a new (child) process
<ul>
<li> child executes concurrently with parent
<li> runs in its own address space &nbsp; <tiny>(initially copied from parent)</tiny>
<li> inherits other state information from parent &nbsp; <tiny>(e.g. open fd's)</tiny>
</ul>
Processes have some disadvantages
<ul>
<li> process switching requires kernel intervention
<li> each has a significant amount of state
<li> process interaction requires system-level mechanisms
</ul>
<p><hr><p>
<table width='100%' cellpadding='0'>
<tr valign='top'><td align='left'><span class='cont'>... Creating Concurrency</span></td><td align='right'><small>57/85</small></td></tr></table>
<p>
Alternative mechanism for concurrent tasks: <em>threads</em>
<p>
Difference between threads and processes
<ul>
<li> processes are independent of each other; <br>
	threads exist within a (parent) process
<li> processes have own state; <br>
	threads share parent process state
<li> each process has own address space; <br>
	all threads within a process share one address space
<li> processes communicate via IPC mechanisms <small>(see later)</small>; <br>
	threads can communicate via shared memory
<li> context-switching between processes is expensive; <br>
	context-switching between threads is (relatively) cheap
</ul>
<p><hr><p>
<table width='100%' cellpadding='0'>
<tr valign='top'><td align='left'><span class='heading'>Linux/Unix Threads</span></td><td align='right'><small>58/85</small></td></tr></table>
<p>
<em>pThreads</em> = POSIX implementation of threads
<ul>
<li> requires <large><font color="#008800"><b><code>#include &lt;pthread.h&gt;</code></b></font></large>
<li> provides (opaque) <large><font color="#008800"><b><code>pthread_t</code></b></font></large> data type
<li> functions on threads: create, identify, send signals, exit, ...
</ul>
<p>
<p><div class='center'>
<img alt="[Diagram:Pics/processes/threads-small.png]" src="Pics/processes/threads-small.png">
</div><p>
<p><hr><p>
<table width='100%' cellpadding='0'>
<tr valign='top'><td align='left'><span class='cont'>... Linux/Unix Threads</span></td><td align='right'><small>59/85</small></td></tr></table>
<p>
<large><font color="#008800"><b><code>int pthread_create(pthread_t *Thread, <br>
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; pthread_attr_t *Attr, <br>
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; void *(*Func)(void *), <br>
&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; void *Arg)</code></b></font></large>
<ul>
<li> creates a new thread with specified <large><font color="#008800"><b><code>Attr</code></b></font></large>ibutes
<li> thread info stored in <large><font color="#008800"><b><code>*Thread</code></b></font></large>
<li> thread starts by executing <large><font color="#008800"><b><code>Func()</code></b></font></large> with <large><font color="#008800"><b><code>Arg</code></b></font></large>
<li> returns 0 if OK, -1 otherwise and sets <large><code>errno</code></large>
</ul>
In some ways, analogous to <large><code>fork()</code></large>
<p><hr><p>
<table width='100%' cellpadding='0'>
<tr valign='top'><td align='left'><span class='cont'>... Linux/Unix Threads</span></td><td align='right'><small>60/85</small></td></tr></table>
<p>
<large><font color="#008800"><b><code>pthread_t pthread_self(void)</code></b></font></large>
<ul>
<li> returns <large><font color="#008800"><b><code>pthread_t</code></b></font></large> for current thread
<li> in some ways, analogous to <large><code>getpid()</code></large>
</ul>
<br>
<large><font color="#008800"><b><code>int pthread_equal(pthread_t t1, pthread_t t2);</code></b></font></large>
<ul>
<li> compares two threads
<li> returns non-zero if same thread, 0 otherwise
</ul>
<p><hr><p>
<table width='100%' cellpadding='0'>
<tr valign='top'><td align='left'><span class='cont'>... Linux/Unix Threads</span></td><td align='right'><small>61/85</small></td></tr></table>
<p>
<large><font color="#008800"><b><code>int pthread_join(pthread_t T, void **value_ptr)</code></b></font></large>
<ul>
<li> suspend execution until thread <large><font color="#008800"><b><code>T</code></b></font></large> terminates
<li> <large><font color="#008800"><b><code>pthread_exit()</code></b></font></large> value is placed in <large><font color="#008800"><b><code>*value_ptr</code></b></font></large>
<li> if <large><font color="#008800"><b><code>T</code></b></font></large> has already exited, does not wait
</ul>
<br>
<large><font color="#008800"><b><code>void pthread_exit(void *value_ptr)</code></b></font></large>
<ul>
<li> terminate execution of thread, and do some cleaning up
<li> stores a return value in <large><font color="#008800"><b><code>*value_ptr</code></b></font></large>
</ul>
<p><hr><p>
<table width='100%' cellpadding='0'>
<tr valign='top'><td align='left'><span class='heading'>Exercise 1: Simple Thread Examples</span></td><td align='right'><small>62/85</small></td></tr></table>
<p>
Write a program that
<ul>
<li> creates 5 threads, passes 1..5 as arg to each
<li> displays a message to prove that it ran
<li> exits by returning a NULL value
</ul>
Write a program that
<ul>
<li> creates three threads, passing a value to each
<li> delays a little, then prints a message
<li> delays more, then exits via <large><code>pthread_exit()</code></large>
</ul>
<p><hr><p>
<table width='100%' cellpadding='0'>
<tr valign='top'><td align='left'><span class='heading'>Concurrency</span></td><td align='right'><small>63/85</small></td></tr></table>
<p>
The alternative to concurrency ... sequential execution
<ul>
<li> each process runs to completion before next one starts
<li> low throughput; not acceptable on multi-user systems
</ul>
Concurrency increases system throughput, e.g.
<ul>
<li> if one process is delayed, others can run
<li> if we have multiple CPUs, use all of them at once
</ul>
If processes are completely independent ...
<ul>
<li> each process runs and completes its task
<li> without any effect on the computation of other processes
</ul>
<p><hr><p>
<table width='100%' cellpadding='0'>
<tr valign='top'><td align='left'><span class='cont'>... Concurrency</span></td><td align='right'><small>64/85</small></td></tr></table>
<p>
In reality, processes are often not independent
<ul>
<li> multiple processes accessing a shared resource
<li> one process synchronizing with another for some computation
</ul>
Effects of poorly-controlled concurrency
<ul>
<li> <em>nondeterminism</em> ... same code, different runs, different results
<ul>
<li> e.g. output on shared resource is jumbled
<li> e.g. input from shared resource is unpredictable
</ul>
<li> <em>deadlock</em> ... a group of processes end up waiting for each other
<li> <em>starvation</em> ... one process keeps missing access to resource
</ul>
Therefore we need <em>concurrency control</em> methods
<p><hr><p>
<table width='100%' cellpadding='0'>
<tr valign='top'><td align='left'><span class='heading'>Exercise 2: Nondeterministic Output</span></td><td align='right'><small>65/85</small></td></tr></table>
<p>
Consider a program that
<ul>
<li> forks a child process
<li> parent writes lines of lower case letters
<li> child writes lines of upper-case letters
<li> introduce a small delay between writing chars
</ul>
What output would you expect? What do you observe?
<p><hr><p>
<table width='100%' cellpadding='0'>
<tr valign='top'><td align='left'><span class='cont'>... Concurrency</span></td><td align='right'><small>66/85</small></td></tr></table>
<p>
Example of problematic concurrency ... bank withdrawal:
<p><pre>
<comment>// check balance and return amount withdrawn</comment>
<font color='#999999'>1.</font> int withdraw(Account acct, int howMuch)
<font color='#999999'>2.</font> {
<font color='#999999'>3.</font>    if (acct.balance < howMuch) {
<font color='#999999'>4.</font>       return 0; // can't withdraw
<font color='#999999'>5.</font>    else {
<font color='#999999'>6.</font>       acct.balance -= howMuch;
<font color='#999999'>7.</font>       return howMuch;
<font color='#999999'>8.</font>    }
<font color='#999999'>9.</font> }
</pre><p>
Scenario: two processes, one account A, initial balance $500
<ul>
<li> each process attempts to <large><code>withdraw($300, A)</code></large>
</ul>
<p><hr><p>
<table width='100%' cellpadding='0'>
<tr valign='top'><td align='left'><span class='cont'>... Concurrency</span></td><td align='right'><small>67/85</small></td></tr></table>
<p>
Restatement of program:
<p><pre>
<font color='#999999'>1.</font> int withdraw(Account acct, int howmuch) {
<font color='#999999'>2.</font>    if (acct.balance < howMuch) return 0;
<font color='#999999'>3.</font>    acct.balance -= howMuch; return howMuch;
<font color='#999999'>4.</font> }
</pre><p>
Possible outcome of scenario:
<ul>
<li> process 1 executes up to line 3, then swapped out
<li> process 2 executes up to line 3, then swapped out
<li> process 1 continues and reduces balance by $300
<li> process 2 continues and reduces balance by $300
</ul>
Observed: each process gets $300; account balance is -$100
<br>
Expected: one process gets $300; other fails; balance is $200
<p><hr><p>
<table width='100%' cellpadding='0'>
<tr valign='top'><td align='left'><span class='heading'>Concurrency Control</span></td><td align='right'><small>68/85</small></td></tr></table>
<p>
<em>Concurrency control</em> aims to
<ul>
<li> provide correct sequencing of interactions between processes
<li> coordinate semantically-valid access to shared resources
</ul>
Two broad classes of concurrency control schemes
<ul>
<li> <em>shared memory</em> based &nbsp; <small>(e.g. semaphores)</small>
<li> <em>message passing</em> based &nbsp; <small>(e.g. send/receive)</small>
</ul>
Both schemes require programming support
<ul>
<li> available via special library functions, or
<li> available via new language constructs
</ul>
<p><hr><p>
<table width='100%' cellpadding='0'>
<tr valign='top'><td align='left'><span class='cont'>... Concurrency Control</span></td><td align='right'><small>69/85</small></td></tr></table>
<p>
Shared memory approach:
<ul>
<li> uses shared variable, manipulated <em>atomically</em>
<li> blocks if access unavailable, decrements once available
</ul>
Message passing approach:
<ul>
<li> processes communicate by sending/receiving messages
<li> receiver can block waiting for message to arrive
<li> sender <i>may</i> block waiting for message to be received
<small>
<ul>
<li> synchronous message passing: sender waits for ACK of receipt
<li> asynchronous message passing: sender transmits and continues
</ul>
</small>
</ul>
<p><hr><p>
<table width='100%' cellpadding='0'>
<tr valign='top'><td align='left'><span class='heading'>Producer-Consumer Problem</span></td><td align='right'><small>70/85</small></td></tr></table>
<p>
Classic example for concurrency control issues
<ul>
<li> have a buffer with slots for N items
<li> a process that produces new items and puts them in the buffer
<li> a process that consumes items from the buffer
<li> a mechanism for a process to pause itself
<li> a mechanism for signalling a process to wake up
</ul>
<br>
<p><div class='center'>
<img alt="[Diagram:Pics/processes/prod-cons-small.png]" src="Pics/processes/prod-cons-small.png">
</div><p>
<p><hr><p>
<table width='100%' cellpadding='0'>
<tr valign='top'><td align='left'><span class='cont'>... Producer-Consumer Problem</span></td><td align='right'><small>71/85</small></td></tr></table>
<p>
Data objects shared by two processes:
<p><pre><small>
#define N ??
Item buffer[N];  <comment>// buffer with slots for N items</comment>
int  nItems = 0; <comment>// #items currently in buffer</comment>
int  head = 0, tail = 0;
</small></pre><p>
Functions on buffer (simplified view):
<p><pre><small>
putItemIntoBuffer(item) {     Item getitemFromBuffer() {
   tail = (tail+1) % N;          Item res = buffer[head];
   buffer[tail] = item;          head = (head + 1) % N;
}                                return res;
                              }
</small></pre><p>
<p><hr><p>
<table width='100%' cellpadding='0'>
<tr valign='top'><td align='left'><span class='cont'>... Producer-Consumer Problem</span></td><td align='right'><small>72/85</small></td></tr></table>
<p>
Producer process (P):
<p><pre>
producer() <comment>// process</comment>
{
   Item item;
   for (;;) {
      item = produceItem();
      <comment>// wait if buffer currently full</comment>
      if (nItems == N) pause();
      putItemIntoBuffer(item);
      nItems++;
      <comment>// tell consumer item now available</comment>
      if (nItems == 1) wakeup(consumer);
   }
}
</pre><p>
<p><hr><p>
<table width='100%' cellpadding='0'>
<tr valign='top'><td align='left'><span class='cont'>... Producer-Consumer Problem</span></td><td align='right'><small>73/85</small></td></tr></table>
<p>
Consumer process (C):
<p><pre>
consumer() <comment>// process</comment>
{
   Item item;
   for (;;) {
      <comment>// wait if nothing to consume</comment>
      if (nItems == 0) pause();
      item = getItemFromBuffer()
      nItems--;
      <comment>// free slot available in buffer</comment>
      <comment>// wake up producer in case sleeping</comment>
      if (nItems == N-1) wakeup(producer);
      consumeItem(item);
   }
}
</pre><p>
<p><hr><p>
<table width='100%' cellpadding='0'>
<tr valign='top'><td align='left'><span class='cont'>... Producer-Consumer Problem</span></td><td align='right'><small>74/85</small></td></tr></table>
<p>
A possible scenario &nbsp; <small>(assumes signals only reach paused processes)</small>
<ul>
<li> C checks <large><code>nItems</code></large>, finds zero, decides to pause
<li> just before pausing, C is timed-out &nbsp;<small>(different to paused)</small>
<li> P creates item, puts it in currently empty <large><code>buffer</code></large>
<li> because <large><code>buffer</code></large> now has one item, P signals C
<li> because C is not paused, signal is lost
<li> C is resumed after time-out and pauses
<li> P resumes and adds more items
<li> eventually <large><code>buffer</code></large> fills and P pauses
<li> each process is paused, waiting for signal from the other
</ul>
This situation is <em>deadlock</em> &nbsp;...&nbsp; How to fix?
<p><hr><p>
<table width='100%' cellpadding='0'>
<tr valign='top'><td align='left'><span class='heading'>Semaphores</span></td><td align='right'><small>75/85</small></td></tr></table>
<p>
Semaphore operations:
<ul>
<li> <large><font color="#008800"><b><code>init(<i>Sem</i>, <i>InitValue</i>)</code></b></font></large>
<ul>
<li> set the initial value of semaphore <large><code><i>Sem</i></code></large>
</ul>
<li> <large><font color="#008800"><b><code>wait(<i>Sem</i>)</code></b></font></large> &nbsp;&nbsp; <small>(also called <large><code>P()</code></large>)</small>
<ul>
<li> if current value of <large><code><i>Sem</i></code></large> > 0, decrement <large><code><i>Sem</i></code></large> and continue
<li> otherwise, block and wait until <large><code><i>Sem</i></code></large> value > 0
</ul>
<li> <large><font color="#008800"><b><code>signal(<i>Sem</i>)</code></b></font></large> &nbsp;&nbsp; <small>(also called <large><code>V()</code></large>)</small>
<ul>
<li> increment value of <large><code><i>Sem</i></code></large>, and continue
</ul>
</ul>
<br>
Needs fair release of blocked processes, otherwise &rArr; starvation
<ul>
<li> can be achieved via a FIFO queue &nbsp; <small>(fair, but maybe not optimal)</small>
</ul>
<p><hr><p>
<table width='100%' cellpadding='0'>
<tr valign='top'><td align='left'><span class='heading'>Exercise 3: Semaphores</span></td><td align='right'><small>76/85</small></td></tr></table>
<p>
Solve the withdrawal problem using semaphores
<p><pre>
<comment>// check balance and return amount withdrawn</comment>
int withdraw(Account acct, int howMuch)
{
   if (acct.balance < howMuch) {
      return 0; // can't withdraw
   else {
      acct.balance -= howMuch;
      return howMuch;
   }
}
</pre><p>
<br>
Assume that each <large><code>Account</code></large> record includes a semaphore <large><code>usable</code></large>
<p><hr><p>
<table width='100%' cellpadding='0'>
<tr valign='top'><td align='left'><span class='cont'>... Semaphores</span></td><td align='right'><small>77/85</small></td></tr></table>
<p>
Using semaphores for the producer-consumer problem:
<ul>
<li> semaphores are updated atomically
<li> so can't timeout in <large><code>if (nItems == 0) pause()</code></large>
</ul>
<p><pre>
semaphore nFilled;  init(nFilled, 0);
semaphore nEmpty;   init(nEmpty, N);
semaphore mutex;    init(mutex, 1);
</pre><p>
The <large><code>mutex</code></large> semaphore ensures that
<ul>
<li> only one process at a time manipulates the buffer
<li> allows multiple producers/consumers to interact correctly
</ul>
<p><hr><p>
<table width='100%' cellpadding='0'>
<tr valign='top'><td align='left'><span class='cont'>... Semaphores</span></td><td align='right'><small>78/85</small></td></tr></table>
<p>
Using semaphores for the producer-consumer problem <small>(cont)</small>
<p><pre>
producer() <comment>// process</comment>
{
   Item item;
   for (;;) {
      item = produceItem();
      wait(nEmpty);  <comment>// pause if buffer full</comment>
      wait(mutex);  <comment>// get exclusive access</comment>
      putItemIntoBuffer(item);
      signal(mutex);  <comment>// release exclusive access</comment>
      signal(nFilled);
   }
}
</pre><p>
<p><hr><p>
<table width='100%' cellpadding='0'>
<tr valign='top'><td align='left'><span class='cont'>... Semaphores</span></td><td align='right'><small>79/85</small></td></tr></table>
<p>
Using semaphores for the producer-consumer problem <small>(cont)</small>
<p><pre>
consumer() <comment>// process</comment>
{
   Item item;
   for (;;) {
      wait(nFilled);  <comment>// pause if buffer empty</comment>
      wait(mutex);  <comment>// get exclusive access</comment>
      item = getItemFromBuffer()
      signal(mutex);  <comment>// release exclusive access</comment>
      signal(nEmpty);
      consumeItem(item);
   }
}
</pre><p>
<p><hr><p>
<table width='100%' cellpadding='0'>
<tr valign='top'><td align='left'><span class='cont'>... Semaphores</span></td><td align='right'><small>80/85</small></td></tr></table>
<p>
<em>Semaphores</em> on Linux/Unix ...
<ul>
<li> <large><font color="#008800"><b><code>#include &lt;semaphore.h&gt;</code></b></font></large>, &nbsp; giving &nbsp;<large><font color="#008800"><b><code>sem_t</code></b></font></large>
<li> <large><font color="#008800"><b><code>int sem_init(sem_t *<i>Sem</i>, int <i>Shared</i>, uint <i>Value</i>)</code></b></font></large>
<ul>
<li> create a semaphore object, and set initial value
</ul>
<li> <large><font color="#008800"><b><code>int sem_wait(sem_t *<i>Sem</i>)</code></b></font></large> &nbsp;&nbsp; <small>(i.e. wait())</small>
<ul>
<li> try to decrement; block if <large><code><i>Sem</i> == 0</code></large>
</ul>
<li> <large><font color="#008800"><b><code>int sem_post(sem_t *<i>Sem</i>)</code></b></font></large> &nbsp;&nbsp; <small>(i.e. signal())</small>
<ul>
<li> increment the value of semaphore <large><code><i>Sem</i></code></large>
</ul>
<li> <large><font color="#008800"><b><code>int sem_destroy(sem_t *<i>Sem</i>)</code></b></font></large>
<ul>
<li> free all memory associated with semaphore <large><code><i>Sem</i></code></large>
</ul>
</ul>
<p><hr><p>
<table width='100%' cellpadding='0'>
<tr valign='top'><td align='left'><span class='heading'>Exercise 4: Bank Withdrawal (revisited)</span></td><td align='right'><small>81/85</small></td></tr></table>
<p>
Make the bank withdrawal example more concrete
<ul>
<li> use Linux/Unix <large><code>semaphore</code></large> data type
<li> implement the <large><code>Account</code></large> data type as a tuple
<ul>
<li> <small>(id:integer, name:string[50], balance:float, usable:semaphore)</small>
</ul>
<li> implement a function to open an <large><code>Account</code></large> object
<ul>
<li> <small>e.g. <large><code>Account *newAccount(char *name, float amount)</code></large></small>
</ul>
<li> implement the <large><code>withdraw()</code></large> function
<ul>
<li> <small>e.g. <large><code>float withdraw(Account *acct, float amount)</code></large></small>
</ul>
<li> implement a function to close an <large><code>Account</code></large> object
<ul>
<li> <small>e.g. <large><code>void closeAccount(Account *acct)</code></large></small>
</ul>
</ul>
<p><hr><p>
<table width='100%' cellpadding='0'>
<tr valign='top'><td align='left'><span class='heading'>Interacting Processes</span></td><td align='right'><small>82/85</small></td></tr></table>
<p>
Processes can interact via
<ul>
<li> signals: <large><code>kill()</code></large>, <large><code>wait()</code></large>, signal handlers
<li> accessing the same resource &nbsp;<small>(e.g. writing onto the same file)</small>
<li> pipes: stdout of process A goes into stdin of process B
<li> message queues: passing data between each other
<li> sockets: client-server style interaction
</ul>
<br>
Uncontrolled interaction is a problem: nondeterministic
<p><hr><p>
<table width='100%' cellpadding='0'>
<tr valign='top'><td align='left'><span class='cont'>... Interacting Processes</span></td><td align='right'><small>83/85</small></td></tr></table>
<p>
Example of problematic process interaction:
<ul>
<li> two processes writing to same file "simultaneously"
<li> order of output depends on actions of (opaque) scheduler
</ul>
<p><div class='center'>
<img alt="[Diagram:Pics/processes/flock0-small.png]" src="Pics/processes/flock0-small.png">
</div><p>
<p>
Could control access to file via semaphores
<p>
An alternative (less general) mechanism: <em>file locking</em>
<p><hr><p>
<table width='100%' cellpadding='0'>
<tr valign='top'><td align='left'><span class='heading'>File Locking</span></td><td align='right'><small>84/85</small></td></tr></table>
<p>
<large><font color="#008800"><b><code>int flock(int <i>FileDesc</i>, int <i>Operation</i>)</code></b></font></large>
<ul>
<li> controls access to shared files  &nbsp; <small>(<b>note</b>: files not fds)</small>
<li> possible operations
<ul>
<li> <large><font color="#008800"><b><code>LOCK_SH</code></b></font></large> ... acquire shared lock
<li> <large><font color="#008800"><b><code>LOCK_EX</code></b></font></large> ... acquire exclusive lock
<li> <large><font color="#008800"><b><code>LOCK_UN</code></b></font></large> ... unlock
<li> <large><font color="#008800"><b><code>LOCK_NB</code></b></font></large> ... operation fails rather than blocking
</ul>
<li> in blocking mode, <large><code>flock()</code></large> does not return until lock available
<li> only works correctly if all processes accessing file use locks
<li> return value: 0 in success, -1 on failure
</ul>
<p><hr><p>
<table width='100%' cellpadding='0'>
<tr valign='top'><td align='left'><span class='cont'>... File Locking</span></td><td align='right'><small>85/85</small></td></tr></table>
<p>
If a process tries to acquire a <em>shared lock</em> ...
<ul>
<li> if file not locked or other shared locks, OK
<li> if file has exclusive lock, blocked
</ul>
If a process tries to acquire an <em>exclusive lock</em> ...
<ul>
<li> if file is not locked, OK
<li> if any locks (shared or exclusive) on file, blocked
</ul>
If using a non-blocking lock
<ul>
<li> <large><code>flock()</code></large> returns 0 if lock was acquired
<li> <large><code>flock()</code></large> returns -1 if process would have been blocked
</ul>
<p><hr><p>
<small><small>Produced: 8 Aug 2019</small></small>
</body>
</html>
